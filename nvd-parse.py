#!/usr/bin/env python

import sys
import json
from xml.sax import make_parser, handler
from elasticsearch import Elasticsearch

es = Elasticsearch(['http://elastic:changeme@localhost:9200'])
#es = Elasticsearch(['http://localhost:9200'])

class CVEHandler(handler.ContentHandler):

    def __init__(self):
        handler.ContentHandler.__init__(self)

        self.CVE = {}
        self.refs = []
        self.currentElement = None

    # ContentHandler methods

    def startElement(self, name, attrs):
        if name == 'nvd':
            # The nvd tag starts this show, let's ignore it
            pass
        elif name == 'entry':
            # Here we go

            # References object
            # We will store the references in their own index, there's not
            # a great way to stick them in the CVE index
            self.references = []

            # CVE Object
            self.CVE = {}
            self.id = attrs['id']
            theYear = attrs['id'].split('-')[1]
            theID = attrs['id'].split('-')[2]
            self.CVE['year'] = int(theYear)
            self.CVE['id'] = int(theID)
            self.CVE['product'] = []
            self.CVE['fromNVD'] = 1

        elif name == 'vuln:summary':
            # The descriptions is filled in via the characters() method
            self.currentElement = name
            self.CVE['description'] = ''

        elif name == "vuln:product":
            self.currentElement = name
            self.CVE['product'].append('')

        elif name == "vuln:cwe":
            self.currentElement = name
            self.CVE['cwe'] = attrs['id']

        elif name == "vuln:references":
            self.currentElement = name
            self.references.append({})
            self.references[-1]['CVE'] = self.id
            self.references[-1]['reference_type'] = attrs['reference_type']

        elif name == "vuln:source":
            self.currentElement = name
            self.references[-1]['source'] = ''

        elif name == "vuln:reference":
            self.currentElement = name
            self.references[-1]['href'] = attrs['href']

        # There are a number of cvss: tags, we'll catch them all
        elif name.startswith("cvss:"):
            # We don't care about base_metrics
            if name == "cvss:base_metrics":
                self.currentElement = None
                return
            self.currentElement = name
            self.CVE[name] = ''


        else:
            # This is a tag we don't care about
            #print name
            pass

    def endElement(self, name):
        if name == 'nvd':
            # The cve tag starts this show, let's ignore it
            pass
        elif name == 'entry':
            # All done with this ID, store our data somewhere
            #es.index(id=self.id, index="cve-index", doc_type='cve', body=self.CVE)
            es.update(id=self.id, index="cve-index", doc_type='cve', body={'doc' :self.CVE, 'doc_as_upsert': True})

            for i in self.references:
                es.index(index="cve-references", doc_type='ref',
body=i)
        elif name == "vuln:product":
            # Remove the cpe:/a bit of the ID
            cpe = self.CVE['product'][-1]
            words = cpe.split(':')
            cpe = ' '.join(words[2:])
            self.CVE['product'][-1] = cpe
        elif name == "cvss:score":
            # This is a float
            self.CVE["cvss:score"] = float(self.CVE["cvss:score"])
        else:
            # This is a tag we don't care about
            pass

        self.currentElement = None

    def characters(self, content):

        # This will be None for tags we don't care about
        if self.currentElement is None:
            return

        # This is ugly, but it'll work
        if self.currentElement == 'vuln:summary':
            self.CVE['description'] += content
        elif self.currentElement == "vuln:product":
            self.CVE['product'][-1] += content
        elif self.currentElement == "vuln:source":
            self.references[-1]['source'] += content
        elif self.currentElement.startswith("cvss:"):
            self.CVE[self.currentElement] += content
        else:
            pass


def main():

    if len(sys.argv) > 1:
        input_file = sys.argv[1]
    else:
        print "Usage: %s <nvd-xml-file>" % (sys.argv[0])
        sys.exit(1)

    parser = make_parser()
    parser.setContentHandler(CVEHandler())
    parser.parse(input_file)

if __name__ == "__main__":
    main()
